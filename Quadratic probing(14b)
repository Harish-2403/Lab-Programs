#include <stdio.h>

#define TABLE_SIZE 11

// Function to calculate the hash value
int hash(int key) {
    return key % TABLE_SIZE;
}

// Function to insert a key into the hash table using quadratic probing
void insert(int table[], int key) {
    int index = hash(key);
    int i = 1;

    while (table[index] != -1) {
        index = (index + i * i) % TABLE_SIZE;
        i++;
    }

    table[index] = key;
}

// Function to display the contents of the hash table
void display(int table[]) {
    printf("Hash Table: ");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (table[i] != -1) {
            printf("%d ", table[i]);
        } else {
            printf("- ");
        }
    }
    printf("\n");
}

int main() {
    int hashTable[TABLE_SIZE];

    // Initialize the hash table with -1 to indicate empty slots
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i] = -1;
    }

    int numKeys;
    printf("Enter the number of keys to insert: ");
    scanf("%d", &numKeys);

    printf("Enter the keys:\n");
    for (int i = 0; i < numKeys; i++) {
        int key;
        scanf("%d", &key);
        insert(hashTable, key);
    }

    // Display the contents of the hash table
    display(hashTable);

    return 0;
}
